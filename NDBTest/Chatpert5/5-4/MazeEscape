from collections import deque

def escape_maze(n, m, maze):
    # 상하좌우 이동 방향
    dx = [-1, 1, 0, 0]
    dy = [0, 0, -1, 1]

    queue = deque()
    queue.append((0, 0))  # 시작 위치
    visited = [[False] * m for _ in range(n)]  # 방문 여부를 저장하는 배열
    visited[0][0] = True  # 시작 위치 방문 처리

    while queue:
        x, y = queue.popleft()

        # (N, M)에 도달하면 최소 이동 칸의 개수를 반환
        if x == n-1 and y == m-1:
            return maze[x][y]

        # 상하좌우로 이동 가능한지 확인하고 큐에 추가
        for i in range(4):
            nx = x + dx[i]
            ny = y + dy[i]

            # 미로를 벗어나지 않고, 방문하지 않았으며, 괴물이 없는 경우
            if 0 <= nx < n and 0 <= ny < m and not visited[nx][ny] and maze[nx][ny] == 1:
                visited[nx][ny] = True
                maze[nx][ny] = maze[x][y] + 1  # 이동한 칸의 개수를 저장
                queue.append((nx, ny))

    return -1  # 탈출할 수 없는 경우

# 입력 예시
N, M = map(int, input().split())
maze = []
for _ in range(N):
    maze.append(list(map(int, input())))

# 최소 이동 칸의 개수 출력
print(escape_maze(N, M, maze))
